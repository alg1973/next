#!/usr/bin/python 

from __future__ import print_function
import sys
import time
import datetime
import dyndb
import tconf
import bstate
from w1thermsensor import W1ThermSensor
import subprocess
import os
import sys

devnull = open(os.devnull, 'w')




def db2local(b, db):
        response=db.get_cmd(b.boiler_name,b.boiler_name)
        if response.has_key('Item'):
                i=response['Item']
                if b.state['target']!=float(i.get('target',-1)) or  b.state['heating']!=int(i.get('heating',-1)):
                        print ("Remote state change for {0}".format(b.boiler_name))
                        print (b.write_state(float(i.get('target',-1)),int(i.get('heating',-1))))
                        
        return b.state


def boiler_state():
        out = subprocess.check_output([tconf.relay_cmd], stderr=devnull)
        if out:
                for l in out.splitlines():
                        state = l.split('=')
                        if len(state) == 2 and state[0] == tconf.relay:
                                return state[1]
        return -1

def boiler_on(cur_s):
        if cur_s == tconf.relay_on:
                return
        print ("Switching on") 
	sys.stdout.flush()
        subprocess.check_output([tconf.relay_cmd, "{0}={1}".format(tconf.relay,tconf.relay_on)], 
                                stderr=devnull)

def boiler_off(cur_s):
        if cur_s == tconf.relay_off:
                return
        print ("Switching off") 
	sys.stdout.flush()
        subprocess.check_output([tconf.relay_cmd, "{0}={1}".format(tconf.relay,tconf.relay_off)],
                                stderr=devnull)

def now_day():
        now = datetime.datetime.now()
        if now.hour >= 23 or now.hour<7:
                return 0
        else:
                return 1


def run_cmd(cur_t, cmd, cur_s):
        target_t = cmd.get('target', tconf.def_temp)
        # command mode: 0 - always off; 1 - maintain target; 2 - target at night, 5 at day  
        mode = cmd.get('heating', 1)
        if mode == 0:
                boiler_off(cur_s);
        else:
                if mode == 2 and now_day():
                        target_t = tconf.def_temp
                if cur_t < target_t:
			print ("cur t: {0}, target t:{1}, relay state={2}; heat turning on".format(cur_t, target_t, 
					cur_s))
			sys.stdout.flush()
                        boiler_on(cur_s)
                else:
			print ("cur t: {0}, target t:{1}, relay state={2}; heat turning off".format(cur_t, target_t, 
					cur_s))
			sys.stdout.flush()
                        boiler_off(cur_s)

                                

if len(sys.argv)==3:
        tty_name=sys.argv[1]
        thermo_name=sys.argv[2]
else:
        tty_name=tconf.tty
        thermo_name=tconf.thermo_name

#read boiler state file        
boiler = bstate.Boiler(thermo_name)  

# Connect to Dynamodb
db=dyndb.Tempdb(tconf.url,tconf.region)

sensor = W1ThermSensor()

while True:
        boiler.read_state()
	temp_in_c1 = sensor.get_temperature()
	temp_in_c2 = sensor.get_temperature()
        cur_s = boiler_state()
        if temp_in_c1:
                print (time.time(),temp_in_c1, temp_in_c2, boiler.state['target'],boiler.state['heating'], 
									cur_s == tconf.relay_on)
		sys.stdout.flush()
                db.put_values(temp_in_c1, temp_in_c2, thermo_name,boiler.state['target'],
                              boiler.state['heating'], cur_s == tconf.relay_on)
        else:
                print ("ERR read invalid data from wired thermometr: '")
        
        boiler_cmd = db2local(boiler, db)
        run_cmd(temp_in_c1, boiler_cmd, cur_s)

        time.sleep(tconf.therm_rate)


